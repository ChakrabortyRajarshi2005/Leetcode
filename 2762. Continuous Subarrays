2762. Continuous Subarrays
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:

Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.
Return the total number of continuous subarrays.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [5,4,2,4]
Output: 8
Explanation: 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.
 

Example 2:

Input: nums = [1,2,3]
Output: 6
Explanation: 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
import java.util.*;
public class Solution {
    public long continuousSubarrays(int[] nums) {
        int n = nums.length;
        int[][] minTable = buildMinTable(nums);
        int[][] maxTable = buildMaxTable(nums);

        long result = 0;
        for (int i = 0; i < n; ++i) {
            int low = i, high = n - 1;

            while (low < high) {
                int mid = (low + high + 1) / 2;
                int minVal = query(minTable, i, mid);
                int maxVal = queryMax(maxTable, i, mid);

                if (maxVal - minVal > 2) {
                    high = mid - 1;
                } else {
                    low = mid;
                }
            }

            result += high - i + 1;
        }
        return result;
    }

    private int lg2(int x) {
        return x == 0 ? -1 : 31 - Integer.numberOfLeadingZeros(x);
    }

    private int[][] buildMinTable(int[] a) {
        int n = a.length;
        int maxK = lg2(n) + 1;
        int[][] minTable = new int[maxK][n];

        for (int i = 0; i < n; ++i) {
            minTable[0][i] = a[i];
        }

        for (int k = 1; (1 << k) <= n; ++k) {
            for (int i = 0; i + (1 << k) <= n; ++i) {
                minTable[k][i] = Math.min(minTable[k - 1][i], minTable[k - 1][i + (1 << (k - 1))]);
            }
        }
        return minTable;
    }

    private int[][] buildMaxTable(int[] a) {
        int n = a.length;
        int maxK = lg2(n) + 1;
        int[][] maxTable = new int[maxK][n];

        for (int i = 0; i < n; ++i) {
            maxTable[0][i] = a[i];
        }

        for (int k = 1; (1 << k) <= n; ++k) {
            for (int i = 0; i + (1 << k) <= n; ++i) {
                maxTable[k][i] = Math.max(maxTable[k - 1][i], maxTable[k - 1][i + (1 << (k - 1))]);
            }
        }
        return maxTable;
    }

    private int query(int[][] table, int x, int y) {
        int k = lg2(y - x + 1);
        return Math.min(table[k][x], table[k][y - (1 << k) + 1]);
    }

    private int queryMax(int[][] table, int x, int y) {
        int k = lg2(y - x + 1);
        return Math.max(table[k][x], table[k][y - (1 << k) + 1]);
    }
}
