Reverse Nodes in k-Group
Solved
Hard
Topics
Companies
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1)
            return head;

        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode ptr = dummy;

        while (ptr != null) {
            ListNode tracker = ptr;
                for (int i = 0; i < k && tracker != null; i++) {
                tracker = tracker.next;
            }

            if (tracker == null) {
                break;
            }

            ListNode[] updatedNodes = reverseLinkedList(ptr.next, k);

            ListNode previous = updatedNodes[0];
            ListNode current = updatedNodes[1];
            ListNode lastNodeOfReversedGroup = ptr.next;
            lastNodeOfReversedGroup.next = current;
            ptr.next = previous;
            ptr = lastNodeOfReversedGroup;
        }

        return dummy.next;
    }

    private ListNode[] reverseLinkedList(ListNode head, int k) {
        ListNode previous = null;
        ListNode current = head;
        ListNode next = null;

        for (int i = 0; i < k; i++) {
          
            next = current.next;
            current.next = previous;
            previous = current;
            current = next;
        }
        return new ListNode[] { previous, current };
    }
}
